<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  Copyright (c) 2010 Matthew J. Dovey (www.ceridwen.com).
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Public License v3.0
  which accompanies this distribution, and is available at 
  <http://www.gnu.org/licenses/>
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  
  Contributors:
      Matthew J. Dovey (www.ceridwen.com) - initial API and implementation
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="unqualified">
  <xs:element name="SelfIssue">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="UI">
          <xs:annotation>
            <xs:documentation>This section determines various properties of the user interface including visual and audio elements.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="SelfIssue">
                <xs:annotation>
                  <xs:documentation>Main window settings</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element maxOccurs="1" name="RightIcon_Icon" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Header right hand image file</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LeftIcon_Icon" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Header left hand image file</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TitleText_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Main title text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TitleText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Main title text font</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TitleText_Size" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Main title text size</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LibraryText_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Subtitle text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LibraryText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Subtitle text font</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LibraryText_Size" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Subtitle text size</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Palette">
                <xs:annotation>
                  <xs:documentation>Colour configuration</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="OuterBorderColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InnerBorderColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TitleBackgroundColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BackgroundColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TitleTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DefaultTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WarningTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="VersionTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ButtonTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ButtonBackgroundColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="PatronPanel">
                <xs:annotation>
                  <xs:documentation>Patron panel settings</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="PatronSalutation_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronField_DefaultText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CardIcon_Icon" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronFieldLabel_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronFieldLabel_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronField_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronPasswordPrompt" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronPanelNextButton_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronPanelNextButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronPanelResetButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronPanelResetButton_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="CheckOutPanel">
                <xs:annotation>
                  <xs:documentation>Checkout Panel Settings</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="BooksIcon_Icon" type="xs:string"/>
                    <xs:element name="PatronText_DefaultText" type="xs:string"/>
                    <xs:element name="PatronText_ToolTipText" type="xs:string"/>
                    <xs:element name="StatusText_DefaultText" type="xs:string"/>
                    <xs:element name="StatusText_ToolTipText" type="xs:string"/>
                    <xs:element name="BookFieldLabel_Text" type="xs:string"/>
                    <xs:element name="BookFieldLabel_ToolTipText" type="xs:string"/>
                    <xs:element name="BookField_ToolTipText" type="xs:string"/>
                    <xs:element name="CheckoutButton_Text" type="xs:string"/>
                    <xs:element name="CheckoutButton_ToolTipText" type="xs:string"/>
                    <xs:element name="BookPanelNextButton_Text" type="xs:string"/>
                    <xs:element name="BookPanelNextButton_ToolTipText" type="xs:string"/>
                    <xs:element name="BookPanelCheckinButton_Text" type="xs:string"/>
                    <xs:element name="BookPanelCheckinButton_ToolTipText" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="CheckInPanel">
                <xs:annotation>
                  <xs:documentation>Checkin Panel Settings</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="BooksIcon_Icon" type="xs:string"/>
                    <xs:element name="PatronText_DefaultText" type="xs:string"/>
                    <xs:element name="PatronText_ToolTipText" type="xs:string"/>
                    <xs:element name="StatusText_DefaultText" type="xs:string"/>
                    <xs:element name="StatusText_ToolTipText" type="xs:string"/>
                    <xs:element name="BookFieldLabel_Text" type="xs:string"/>
                    <xs:element name="BookFieldLabel_ToolTipText" type="xs:string"/>
                    <xs:element name="BookField_ToolTipText" type="xs:string"/>
                    <xs:element name="CheckinButton_Text" type="xs:string"/>
                    <xs:element name="CheckinButton_ToolTipText" type="xs:string"/>
                    <xs:element name="BookPanelNextButton_Text" type="xs:string"/>
                    <xs:element name="BookPanelNextButton_ToolTipText" type="xs:string"/>
                    <xs:element name="BookPanelCheckoutButton_Text" type="xs:string"/>
                    <xs:element name="BookPanelCheckoutButton_ToolTipText" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Messages">
                <xs:annotation>
                  <xs:documentation>{0}, {1] etc. will be replaced by message specific strings</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="GreetPatronCheckout" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = patron name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="GreetPatronCheckin" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = patron name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckingPatronMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidPatronBarcode" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = borrower id</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronRetry" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronNetworkError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = borrower id</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidPatronError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = borrower id</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BlockedPatronError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnexpectedPatronError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutPendingMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidItemBarcode" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutRetry" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckOutSuccess" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item title or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DueDateMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = date due</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="NoDueDateMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation/>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutNetworkError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnexpectedCheckoutError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnlockFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnlockFailedCheckInFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckInSuccess" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode; {1] = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinNetworkError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode; {1] = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnexpectedCheckinError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LockFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinPendingMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Audio">
                <xs:annotation>
                  <xs:documentation>Audio feedback for messages
Remove the entries for silent operation</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ValidPatron" type="xs:string"/>
                    <xs:element name="CheckOutSuccess" type="xs:string"/>
                    <xs:element name="PatronRetry" type="xs:string"/>
                    <xs:element name="CheckoutRetry" type="xs:string"/>
                    <xs:element name="InvalidPatronBarcode" type="xs:string"/>
                    <xs:element name="PatronNetworkError" type="xs:string"/>
                    <xs:element name="InvalidPatronError" type="xs:string"/>
                    <xs:element name="BlockedPatronError" type="xs:string"/>
                    <xs:element name="UnexpectedPatronError" type="xs:string"/>
                    <xs:element name="InvalidItemBarcode" type="xs:string"/>
                    <xs:element name="CheckoutNetworkError" type="xs:string"/>
                    <xs:element name="CheckoutFailedError" type="xs:string"/>
                    <xs:element name="UnexpectedCheckoutError" type="xs:string"/>
                    <xs:element name="UnlockFailedError" type="xs:string"/>
                    <xs:element name="UnlockFailedCheckInFailedError" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Validation">
                <xs:annotation>
                  <xs:documentation>Pattern matching check on entered barcodes - remove for no validation</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="PatronBarcodeMask" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>2 followed by 6 digits or name</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ItemBarcodeMask" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>3 followed by 8 digits or P,T,R followed by 6 digits</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Control">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element maxOccurs="1" name="ResetTimeout" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Idle time in seconds before the software resets to the patron screen</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StripPatronChecksumDigit" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Remove final digit from patron barcodes</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StripItemChecksumDigit" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Remove final digit from item barcodes</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="WatchDog">
                <xs:annotation>
                  <xs:documentation>Watch dog thread settings</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Timer" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>How often to check health (seconds)</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CriticalSectionThreshold" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Number of consecutive health checks in critical section (e.g. communication with 3M server still active) to cause fatal error log</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="MinimumMemory" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Minimum working memory before causing fatal error log</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ShowOutOfOrderScreenOnWatchDogProblem" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Show Out Of Order screen if memory low or too long in critical section</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ShowOutOfOrderScreenOnUnhandledException" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Show Out Of Order screen if unhandled exception happens</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Systems">
          <xs:annotation/>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="SIP">
                <xs:annotation>
                  <xs:documentation>This contains the connection details for the 3M SIP server (NISO CIP to be supported in a future version).

Currently supports 3M SIP2 over Telnet or Socket</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Host" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>IP address of 3M SIP server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Port" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>IP Port of 3M SIP Server (typically 23 for telnet)</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TelnetUsername" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>For telnet, telnet username</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TelnetPassword" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>For telnet, telnet password</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LoggedOnText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>For telnet, text string to look for to determine succesful login</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LoginUserId" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, 3M SIP2 Username to be set on via 3M SIP2  logon message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LoginPassword" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, 3M SIP2 password to be set on via 3M SIP2 logon message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LocationCode" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required a location code to be sent via 3M SIP2 login message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UIDAlgorithm" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required the UIDAlgorithm used by the 3M SIP2 server for the 3M SIP2 Login message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PWDAlgorithm" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, the 3M SIP2 Algorithm used by the 3M Server for the 3M SIP2 Login message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ConnectionTimeout" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Time (seconds) to wait during initial connection</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="IdleTimeout" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Time (seconds) to wait when awaiting response to a transaction</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="RetryAttempts" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Number of reconnection attempts if initial connection fails</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="RetryWait" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Time (ms) to wait between connection retries</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="AddSequenceAndChecksum" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Add sequence and checksum to requests - may be required by some 3M SIP2 servers</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StrictChecksumChecking" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>If true reject responses from 3M SIP2 server if the checksum is not valid</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StrictSequenceChecking" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>If true reject responses from 3M SIP2 server if the sequence check digit is not valid</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InstitutionId" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, send an institutional id on 3M SIP2 messages to server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TerminalPassword" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, send an termninal password on 3M SIP2 messages to server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="SendEndPatronSession" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>(Optional - may depend on 3M SIP implementation). Send an 3M SIP2 End Patron Session on discconect from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="RequirePatronPassword" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Optional, prompt user for password after entering barcode and before allowing book issue.</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute form="unqualified" name="mode" use="required">
                    <xs:annotation>
                      <xs:documentation>Communication mode: Socket or Telnet</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="Socket"/>
                        <xs:enumeration value="Telnet"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="PatronIDReaderDevice">
                <xs:annotation>
                  <xs:documentation>This allows optional support for local security tagging and gates. The included class works with JavaCard RFID devices.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="SmartCardReader" type="xs:string"/>
                  </xs:sequence>
                  <xs:attribute name="class" use="required">
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="com.ceridwen.selfissue.client.nulldevices.IDReaderDevice"/>
                        <xs:enumeration value="com.ceridwen.selfissue.client.devices.JavaSmartCardDevice"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="ItemIDReaderDevice">
                <xs:annotation>
                  <xs:documentation>This allows optional support for local security tagging and gates. The included class works with JavaCard RFID devices.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="SmartCardReader" type="xs:string"/>
                  </xs:sequence>
                  <xs:attribute name="class" use="required">
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="com.ceridwen.selfissue.client.nulldevices.IDReaderDevice"/>
                        <xs:enumeration value="com.ceridwen.selfissue.client.devices.JavaSmartCardDevice"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="ItemSecurityDevice">
                <xs:annotation>
                  <xs:documentation>This allows optional support for local security tagging and gates. The included class works with JavaCard RFID devices.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Retries" type="xs:nonNegativeInteger"/>
                    <xs:element name="Timeout" type="xs:nonNegativeInteger"/>
                  </xs:sequence>
                  <xs:attribute name="class" use="required">
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="com.ceridwen.selfissue.client.nulldevices.ItemSecurityDevice"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="Printer">
                <xs:annotation>
                  <xs:documentation>This allows optional receipt printing</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="PrintReceipt" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>If true print receipt to default printer</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Loggers">
                <xs:annotation>
                  <xs:documentation>Can contain multiple loggers</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element maxOccurs="unbounded" name="Logger">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="EventMask">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CheckoutSuccess" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject “Self Issue Checkout Report: Checkout Success Notification (no action required)” will be sent whenever a checkout is successfully performed on the 3M server (and reported to the user).

It is anticipated that this would normally be suppressed unless a full record of activity is needed.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckoutFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject “Self Issue Checkout Report: Checkout Failure Notification (no action required)” whenever a checkout cannot be completed and the user is informed that the checkout has failed. This would normally be suppressed, but might be required to be recorded if there is a danger that the user would attempt to remove the item anyway.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckoutPending" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject “Self Issue Checkout Report: Checkout Pending Notification (no action required)”. An item has been issued to an user when the 3M system was unavailable, and the checkout request has been spooled for an abnormally long amount of time. This is a warning message that there may be a problem with the Self Issue client's communication with the 3M server, the 3M server has been unavailable for an abnormal amount of time, or there is a network problem. No action is required as the client will continue to attempt to commit the checkout, but these warning should be kept in case of a synchronisation mismatch (e.g. if the patron returns the item before the checkout can be committed)</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="ManualCheckout" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>(ii) the item was spooled in Offline mode, but the 3M server has not been available for the designated maximum life an item can be kept in the spooler</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="Notification" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject “Self Issue Checkout Report: Notification (no action required)” will be sent whenever a message is successfully sent to the 3M server.
It is anticipated that this would normally be suppressed unless a full record of activity is needed.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="UnlockFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if security device on item could not be unlocked successfully.

Action may be required, but the user would be prompted to retry. An attempt is made to cancel the checkout.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CancelCheckoutFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if a cancel checkout could not be performed after an unlock failure. Action may be required - the user is warned that the book is checked out but still alarmed and advised to consult a member of staff</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="UnlockSuccess" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if security device on item was unlocked successfully.

It is anticipated that this would normally be suppressed unless a full record of activity is needed</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckinSuccess" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject “Self Issue Checkin Report: Checkin Success Notification (no action required)” will be sent whenever a checkin is successfully performed on the 3M server (and reported to the user).

It is anticipated that this would normally be suppressed unless a full record of activity is needed.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckinFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject “Self Issue Checkin Report: Checkin Failure Notification (no action required)” whenever a checkin cannot be completed and the user is informed that the checkin has failed. This would normally be suppressed, but might be required to be recorded if there is a danger that the user would attempt to remove the item anyway.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckinPending" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject “Self Issue Checkin Report: Checkin Pending Notification (no action required)”. An item has been issued to an user when the 3M system was unavailable, and the checkout request has been spooled for an abnormally long amount of time. This is a warning message that there may be a problem with the Self Issue client's communication with the 3M server, the 3M server has been unavailable for an abnormal amount of time, or there is a network problem. No action is required as the client will continue to attempt to commit the checkin, but these warning should be kept in case of a synchronisation mismatch (e.g. if the patron returns the item before the checkin can be committed)</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="LockFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if security device on item could not be locked successfully.

Action may be required, but the user would be prompted to retry. An attempt is made to cancel the checkin.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="LockSuccess" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if security device on item was locked successfully.

It is anticipated that this would normally be suppressed unless a full record of activity is needed</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="ReplayPeriod" type="xs:nonNegativeInteger">
                            <xs:annotation>
                              <xs:documentation>Messages may be spooled if the server to receive them is not available. This indicates how often the spool is checked for stored messages (minutes)</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="OverdueAgeOutOfOrder" type="xs:nonNegativeInteger">
                            <xs:annotation>
                              <xs:documentation>If age (hours) of message in queue exceeds this, force Out Of Order (0 to disable) on the basis there is a severe network problem</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Host" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>Server to send messages to (not used for SMTP logger)</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Port" type="xs:integer">
                            <xs:annotation>
                              <xs:documentation>Port to send messages to (not used for SMTP logger)</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="To" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>SMTP logger - e-mail address to send reports to</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="From" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>SMTP Logger: E-mail address from which reports originate (and to which bounce messages will be sent)</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Relay" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>SMTP Relay address</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="ConnectionTimeout" type="xs:nonNegativeInteger">
                            <xs:annotation>
                              <xs:documentation>Time (seconds) to wait during initial connection</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="IdleTimeout" type="xs:nonNegativeInteger">
                            <xs:annotation>
                              <xs:documentation>Time (seconds) to wait for responses</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Spool" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>File to spool messages waiting to be sent to</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                        </xs:sequence>
                        <xs:attribute name="class" use="required">
                          <xs:simpleType>
                            <xs:restriction base="xs:string">
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.MailLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.SyslogLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.RestLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.nulldevices.OnlineLogLogger"/>
                            </xs:restriction>
                          </xs:simpleType>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Spooler">
                <xs:annotation>
                  <xs:documentation>Local spool for offline stored requests</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ReplayPeriod" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Time (minutes) to replay spooler</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="OverdueAgeWarn" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Time (hours) item can remain in spooler before generating warning message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="OverdueAgeExpire" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Time (hours) item can remain in spooler before generating manual intervention message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Spool" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>File to store spooled request</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Modes">
          <xs:annotation>
            <xs:documentation>This section configures the behaviour of the Self Issue client software</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="TrustMode" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>When false, an item will only be reported issued if the 3M server allows the item to be issued; if the 3M server fails the issue the reason will be reported to the end user.

When true, an item will always be reported issued. If the issue cannot be committed by the client to the 3M server (e.g. if the borrower has too many items out), a message is sent to the librarian (using the method specified in the Systems/Loggers section) requesting manual intervention.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="AllowOffline" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>When AllowOffline is true, any attempt to issue an item when the 3M server is unavailable will result in the item being reported issued to the user. These transactions are spooled on the client and then played back to the 3M server when it is available again (any items which cannot be committed automatically will generate a message to the librarian using the method specified in Systems/Loggers for manual intervention).</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="UseNoBlock" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Can be set to true if the 3M server supports NoBlock when running in Trust or Offline modes – in this case the 3M server is responsible for reporting cases where manual intervention is required rather than the self issue client.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="RetryPatronWhenError" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>If running in Trust Mode or Offline Mode the Self Issue client may not be able to confirm that the patron id is valid.

If RetryPatronWhenError is false, the Self Issue client will assume that the entered patron id is always valid; if true the Self Issue client will request the patron id to be re-entered if it cannot confirm validity and only continue if the patron id is entered identically twice.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="RetryItemWhenError" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>If running in Trust Mode or Offline Mode the Self Issue client may not be able to confirm that the item id is valid.

If RetryItemWhenError is false, the Self Issue client will assume that the entered item id is always valid; if true the Self Issue client will request the item id to be re-entered if it cannot confirm validity and only continue if the item id is entered identically twice.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="AllowRenews" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>If false the 3M server will return an error if an attempt is made to issue an item already checked out to that patron; if true the 3M server will be told to interpret the check-out as a renewal request.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="SuppressSecurityFailureMessages" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Suppress errors from the Security device</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="SendShutdownStatus" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>If true will send a status update to the 3M server when client shuts down</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="EnableBarcodeAlii" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>EnableBarcodeAlii: If true allows aliaa for command interfaces of the form $Command% (e.g. $Shutdown System% for *Shutdown System¦) This allows commands to be encoded as barcodes (e.g. can be entered from a command barcode sheet)</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="EnableCheckIn" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Enables Check In screen as well as check out screen</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="CommandInterface">
          <xs:annotation>
            <xs:documentation>Enable various debugging/testing features</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="AllowConnectionTest" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Allows *Test Connection¦ command in the patron panel (tests SIP connectivity)</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="AllowSystemsCheck" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Allow *Check Systems¦ command in the patron panel (indicates current modes, memory and spool use)</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="AllowLogTest" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Allow *Test Crash¦ command in the patron panel (tests unexpected error handling)</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="AllowSystemShutdown" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Allow *Shutdown System¦ command in the patron panel (closes Self Issue client after password check)</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="AllowOutOfOrder" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Allow *Out Of Order¦ command to switch to Out of Order screen (after password confirmation)</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="AllowResetOutOfOrder" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Allow *Reset Out Of Order¦ typed on Out of Order screen to reset to normal use (after password confirmation)</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="AllowCheckIn" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>Allow *Check In¦ to switch to check in screen from patron screen (after password).This allows public check out only station to also be a staff only check in station</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="SystemPassword" type="xs:string">
                <xs:annotation>
                  <xs:documentation>System password required to confirm staff actions such as shutdown and reset out of order (encrypted)</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Logging">
          <xs:annotation>
            <xs:documentation>Handles alerting of unexpected errors</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="LoggingHandler">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="level">
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="SEVERE"/>
                          <xs:enumeration value="WARNING"/>
                          <xs:enumeration value="INFO"/>
                          <xs:enumeration value="CONFIG"/>
                          <xs:enumeration value="FINE"/>
                          <xs:enumeration value="FINER"/>
                          <xs:enumeration value="FINEST"/>
                          <xs:enumeration value="ALL"/>
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                    <xs:element name="smtpServer" type="xs:string"/>
                    <xs:element name="sender" type="xs:string"/>
                    <xs:element name="recipients" type="xs:string"/>
                    <xs:element name="syslogHost" type="xs:string"/>
                    <xs:element name="syslogPort" type="xs:nonNegativeInteger"/>
                    <xs:element name="URL" type="xs:string"/>
                  </xs:sequence>
                  <xs:attribute name="class" use="required">
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="com.ceridwen.selfissue.client.logging.SyslogLoggingHandlerWrapper"/>
                        <xs:enumeration value="com.ceridwen.selfissue.client.logging.SMTPLoggingHandlerWrapper"/>
                        <xs:enumeration value="com.ceridwen.selfissue.client.logging.RestLoggingHandlerWrapper"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
