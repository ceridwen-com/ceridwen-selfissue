<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
Copyright (C) 2019 Ceridwen Limited

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="unqualified">
  <xs:element name="SelfIssue">
    <xs:annotation>
      <xs:documentation>The SelfIssue Configuration Editor provides a GUI editor for the contents of the config.xml file for the Self Issue Client. On running the editor it will automatically load the current config.xml values.</xs:documentation>
      <xs:documentation>
          Menu options:<br/> 
          <img src="images/reload.png" style="width:32px"/>Reload - loads the values stored in the config.xml file (i.e. undoes any edits);<br/>
          <img src="images/save.png" style="width:32px"/>Save - saves any changes to the config.xml file;<br/> 
          <img src="images/default.png" style="width:32px"/>Default - loads the default settings (stored in default.xml);<br/> 
          <img src="images/viewxml.png" style="width:32px"/>View XML - displays the XML file of the currently loaded values.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="UI">
          <xs:annotation>
            <xs:documentation>User interface settings</xs:documentation>
          </xs:annotation>            
          <xs:complexType>
            <xs:sequence>
              <xs:element name="SelfIssue">
                <xs:annotation>
                  <xs:documentation>Determines the main window settings used throughout the client application</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="LeftIcon" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Header right hand image file. Images should be stored in the conf directory</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="RightIcon" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Header left hand image file. Images should be stored in the conf directory</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TitleText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Main title text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="SubTitleText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Sub-title text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Styling">
                <xs:annotation>
                  <xs:documentation>Look and Feel and Fonts</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="LookAndFeel" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Java Look and Feel</xs:documentation>
                      </xs:annotation>
                    </xs:element>                   
                    <xs:element name="BorderWidth" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Border width (pxl)</xs:documentation>
                      </xs:annotation>
                    </xs:element> 
                     <xs:element name="VerticalDividerWidth" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Vertical Divider width (pxl)</xs:documentation>
                      </xs:annotation>
                    </xs:element>                                                                     
                     <xs:element name="HorizontalDividerWidth" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Horizontal Divider width (pxl)</xs:documentation>
                      </xs:annotation>
                    </xs:element>                                                                     
                    <xs:element name="TitleText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Main title text font</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TitleText_Size" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Main title text size</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="SubTitleText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Sub-title text font</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="SubTitleText_Size" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Sub-title text size</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DefaultText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Default text font</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DefaultText_Size" type="xs:integer" >
                      <xs:annotation>
                        <xs:documentation>Default text size</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StatusText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Status text font (or indicated by &lt;em&gt; in messages)</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StatusText_Size" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Status text size (or indicated by &lt;em&gt; in message)</xs:documentation>
                      </xs:annotation>
                    </xs:element> 
                    <xs:element name="WarningText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Warning text font (or indicated by &lt;strong&gt; in messages)</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WarningText_Size" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Warning text size (or indicated by &lt;em&gt; in messages)</xs:documentation>
                      </xs:annotation>
                    </xs:element>   
                    <xs:element name="LabelText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Label text font</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LabelText_Size" type="xs:integer" >
                      <xs:annotation>
                        <xs:documentation>Label text size</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="InputText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Input text font</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InputText_Size" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Input text size</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TextInset" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Input box inset size (pt)</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="ButtonText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Button text font</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ButtonText_Size" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Button text size</xs:documentation>
                      </xs:annotation>
                    </xs:element>   
                    <xs:element name="ButtonBorder" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Show button border</xs:documentation>
                      </xs:annotation>
                    </xs:element>   
                    <xs:element name="OutOfOrderText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Font for out of order text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="OutOfOrderText_Size" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Font size for out of order text</xs:documentation>
                      </xs:annotation>
                    </xs:element>                                                                             
                    <xs:element name="VersionText_Font" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Font for version text at bottom of window</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="VersionText_Size" type="xs:nonNegativeInteger">
                      <xs:annotation>
                        <xs:documentation>Font size for version text at bottom of window</xs:documentation>
                      </xs:annotation>
                    </xs:element>                                                           
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Palette">
                <xs:annotation>
                  <xs:documentation>Configures the colours used by the application</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="OuterBorderColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of window outer border</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InnerBorderColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of window inner border</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TitleBackgroundColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Background colour of title area</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BackgroundColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Background colour of main window</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TitleTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of title at top of window</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="SubTitleTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of sub-title at top of window</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="DefaultTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Default colour for text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StatusTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour used in status updates (or indicated by &lt;em&gt; in messages)</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WarningTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour used in warning messages (or indicated by &lt;strong&gt; in messages)</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LabelTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour for input label text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InputTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of input text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InputBackgroundColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of input background</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InputBorderColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of input border</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="InputSelectionColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of selected text background</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="InputSelectedTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of selected text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InputCaretColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of input caret</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InputDisabledTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of disabled input text</xs:documentation>
                      </xs:annotation>
                    </xs:element>                                        
                    <xs:element name="ButtonTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of text in buttons</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ButtonBackgroundColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour of buttons</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="OutOfOrderTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour for out of order text</xs:documentation>
                      </xs:annotation>
                    </xs:element>   
                    <xs:element name="OutOfOrderBackgroundColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour for out of order background</xs:documentation>
                      </xs:annotation>
                    </xs:element>                                      
                    <xs:element name="VersionTextColour" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Colour for version text at bottom of window</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="PatronPanel">
                <xs:annotation>
                  <xs:documentation>Patron panel settings</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="CardIcon" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Main picture (typically an example reader card). Images should be stored in the conf directory</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronText_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip for patron status</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="PatronFieldLabel_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Label for patron barcode edit box label</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronFieldLabel_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip for patron barcode edit box label</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronField_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tool tip for patron barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronField_Length" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Default length of patron barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="PatronSubmitButton_Text" type="xs:string">                 
                      <xs:annotation>
                        <xs:documentation>Submit barcode button text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronSubmitButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Submit barcode button tool tip text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PasswordFieldLabel_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Label for password barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PasswordFieldLabel_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip for password barcode edit box label</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PasswordField_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tool tip for password barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PasswordField_Length" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Default length of patron password edit box (normally blank)</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="PasswordSubmitButton_Text" type="xs:string">                 
                      <xs:annotation>
                        <xs:documentation>Submit password button text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PasswordSubmitButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Submit password button tool tip text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronPanelResetButton_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Reset button text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronPanelResetButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Reset button tool tip text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="CheckOutPanel">
                <xs:annotation>
                  <xs:documentation>Checkout Panel Settings</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="BooksIcon" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Main image. Images should be stored in the conf directory</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronText_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip text on patron information</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutText_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip text on checkout information</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="StatusText_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip text on status information</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookFieldLabel_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Label for book barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookFieldLabel_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip for book barcode edit box label</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookField_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tool tip for book barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookField_Length" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Default length for book barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>                                        
                    <xs:element name="CheckoutButton_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Checkout button text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Checkout button tool tip</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookPanelNextButton_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Finish button text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookPanelNextButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Finish button tooltip</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookPanelCheckinButton_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Start checkin button text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookPanelCheckinButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Start checkin button tooltip</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="CheckInPanel">
                <xs:annotation>
                  <xs:documentation>Checkin Panel Settings</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="BooksIcon" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Main image. Images should be stored in the conf directory</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronText_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip text on patron information</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckInText_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip text on checkin information</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StatusText_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip text for status information</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookFieldLabel_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Label for book barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookFieldLabel_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tooltip for book barcode edit box label</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookField_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Tool tip for book barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookField_Length" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Default length for book barcode edit box</xs:documentation>
                      </xs:annotation>
                    </xs:element>                                        
                    <xs:element name="CheckinButton_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Checkin button text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Checkin button tool tip</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookPanelNextButton_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Finish button text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookPanelNextButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Finish button tooltip</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookPanelCheckoutButton_Text" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Start checkout button text</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BookPanelCheckoutButton_ToolTipText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Start checkout button tooltip</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Messages">
                <xs:annotation>
                  <xs:documentation>Allows configuration of the various messages displayed by the application.
{0}, {1} etc. will be replaced by message specific strings.
Messages support limited html formatting:
&lt;br&gt; - for line breaks;
&lt;em&gt; - for status (uses status font and colour);
&lt;strong&gt; - for warnings (uses warning font and colour).</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="GreetPatronCheckout" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = patron name or barcode; {1} = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="GreetPatronCheckin" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = patron name or barcode; {1} = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckingPatronMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidPatronBarcode" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = patron barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidPatronPassword" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>No substitutes</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="PatronRetry" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>No substitutes</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronNetworkError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = patron barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidPatronError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = patron barcode; {1} = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidPatronPasswordError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = patron barcode; {1} = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="BlockedPatronError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnexpectedPatronError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>No substitutes</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutPendingMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidItemBarcode" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutRetry" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>No substitutes</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckOutSuccess" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item title or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DueDateMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = date due</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="NoDueDateMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>No substitutes</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutNetworkError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnexpectedCheckoutError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnlockFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnlockFailedCheckInFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckInSuccess" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode; {1] = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinNetworkError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode; {1] = message from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnexpectedCheckinError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LockFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item name or barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinPendingMessage" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>{0} = item barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Audio">
                <xs:annotation>
                  <xs:documentation>Audio feedback for messages. Remove the entries for silent operation. Audio files should be stored in the res directory</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="AudioEnabled" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Enable/disable all audio prompts.</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ValidPatron" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on valid patron</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutSuccess" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on check out</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinSuccess" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on check in</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronRetry" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on re-enter patron id</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutRetry" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on re-enter last book</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinRetry" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on re-enter last book</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidPatronBarcode" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on invalid patron barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidPatronPassword" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on invalid patron password</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="PatronNetworkError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on network error checking patron</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidPatronError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on invalid patron</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="BlockedPatronError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on patron account blocked</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnexpectedPatronError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on unknown error checking patron id</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InvalidItemBarcode" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on invalid item barcode</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutNetworkError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on network error on check out</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckoutFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on checkout failed</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnexpectedCheckoutError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on unknown error during checkout</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnlockFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on unlock security on item failed</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnlockFailedCheckinFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on item unlocked but check out could not be undone</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinNetworkError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on network error on check in</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CheckinFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on checkin failed</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UnexpectedCheckinError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on unknown error during checkin</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LockFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on lock security on item failed</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LockFailedCheckoutFailedError" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Audio cue on item locked but check in could not be undone</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Validation">
                <xs:annotation>
                  <xs:documentation>Pattern matching regex check on entered barcodes - remove for no validation</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="PatronBarcodeMask" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Mask for patron barcodes.The default setting of (2\d{6})|([1-9a-zA-Z][\w,. -]+ will accept a barcode consisting of seven digits beginning with the digit 2; or a name (alphabetical input including space)</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PatronPasswordMask" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Mask for patron passwords. The default setting of (2\d{6})|([1-9a-zA-Z][\w,. -]+ will accept a password consisting of seven digits beginning with the digit 2; or a name (alphabetical input including space)</xs:documentation>
                      </xs:annotation>
                    </xs:element>                    
                    <xs:element name="ItemBarcodeMask" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Mask for book barcodes. The default value of [P|T|R]\d{6}|3\d{8}|([1-9a-zA-Z][\w,. -]+) will accept a 9 digit barcode beginning with 3; a 7 digit barcode beginning with P, T or R; or an alphanumeric titles</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Advanced">
                <xs:annotation>
                  <xs:documentation>Advanced UI configuration.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="OutOfOrderText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Terminal out of order message text</xs:documentation>
                      </xs:annotation>
                    </xs:element>  
                    <xs:element name="ResetTimeout" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Idle time in seconds before the software resets to the patron screen</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StripPatronChecksumDigit" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Remove final digit from patron barcodes</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StripItemChecksumDigit" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Remove final digit from item barcodes</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ReferenceMonitorWidth" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Reference monitor width (pixels). Images and fonts will not be resized on reference monitor size.</xs:documentation>
                      </xs:annotation>
                    </xs:element>    
                    <xs:element name="ReferenceMonitorHeight" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Reference monitor height (pixels). Images and fonts will not be resized on reference monitor size.</xs:documentation>
                      </xs:annotation>
                    </xs:element>                                    
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Systems">
         <xs:annotation>
          <xs:documentation>Configure the behaviour of the client</xs:documentation>
         </xs:annotation>            
          <xs:complexType>
            <xs:sequence>
              <xs:element name="SIP">
                <xs:annotation>
                  <xs:documentation>This contains the connection details for the 3M SIP server. Currently supports 3M SIP2 over Telnet or Socket</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Host" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>IP address of 3M SIP server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Port" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>IP Port of 3M SIP Server (typically 23 for telnet)</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TelnetUsername" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>For telnet, telnet username</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TelnetPassword" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>For telnet, telnet password</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LoggedOnText" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>For telnet, text string to look for to determine succesful login</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LoginUserId" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, 3M SIP2 Username to be set on via 3M SIP2  logon message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LoginPassword" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, 3M SIP2 password to be set on via 3M SIP2 logon message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="LocationCode" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required a location code to be sent via 3M SIP2 login message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="UIDAlgorithm" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required the UIDAlgorithm used by the 3M SIP2 server for the 3M SIP2 Login message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PWDAlgorithm" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, the 3M SIP2 Algorithm used by the 3M Server for the 3M SIP2 Login message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ConnectionTimeout" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Time (seconds) to wait during initial connection</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="IdleTimeout" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Time (seconds) to wait when awaiting response to a transaction</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="RetryAttempts" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Number of reconnection attempts if initial connection fails</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="RetryWait" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Time (ms) to wait between connection retries</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="AddSequenceAndChecksum" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Add sequence and checksum to requests - may be required by some 3M SIP2 servers</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StrictChecksumChecking" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>If true reject responses from 3M SIP2 server if the checksum is not valid</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="StrictSequenceChecking" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>If true reject responses from 3M SIP2 server if the sequence check digit is not valid</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InstitutionId" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, send an institutional id on 3M SIP2 messages to server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TerminalPassword" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>If required, send an termninal password on 3M SIP2 messages to server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="SendEndPatronSession" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>(Optional - may depend on 3M SIP implementation). Send an 3M SIP2 End Patron Session on discconect from server</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="RequirePatronPassword" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Optional, prompt user for password after entering barcode and before allowing book issue.</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CharsetEncoding" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Character set encoding</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="FieldOrdering">
                      <xs:annotation>
                        <xs:documentation>Ordering of SIP2 fields in message</xs:documentation>
                      </xs:annotation>
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="alphabetical"/>
                          <xs:enumeration value="specification"/>
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute form="unqualified" name="mode" use="required">
                    <xs:annotation>
                      <xs:documentation>Communication mode: Socket or Telnet</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="SSLSocket"/>
                        <xs:enumeration value="Socket"/>
                        <xs:enumeration value="Telnet"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
                <xs:element name="Modes">
                  <xs:annotation>
                    <xs:documentation>Configure the operation of the client</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="TrustMode" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>When false, an item will only be reported issued if the 3M server allows the item to be issued; if the 3M server fails the issue the reason will be reported to the end user. When true, an item will always be reported issued. If the issue cannot be committed by the client to the 3M server (e.g. if the borrower has too many items out), a message is sent to the librarian (using the method specified in the Systems/Loggers section) requesting manual intervention.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="AllowOffline" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>When AllowOffline is true, any attempt to issue an item when the 3M server is unavailable will result in the item being reported issued to the user. These transactions are spooled on the client and then played back to the 3M server when it is available again (any items which cannot be committed automatically will generate a message to the librarian using the method specified in Systems/Loggers for manual intervention).</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="UseNoBlock" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Can be set to true if the 3M server supports NoBlock when running in Trust or Offline modes – in this case the 3M server is responsible for reporting cases where manual intervention is required rather than the self issue client.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="RetryPatronWhenError" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>If running in Trust Mode or Offline Mode the Self Issue client may not be able to confirm that the patron id is valid. If RetryPatronWhenError is false, the Self Issue client will assume that the entered patron id is always valid; if true the Self Issue client will request the patron id to be re-entered if it cannot confirm validity and only continue if the patron id is entered identically twice.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="RetryItemWhenError" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>If running in Trust Mode or Offline Mode the Self Issue client may not be able to confirm that the item id is valid. If RetryItemWhenError is false, the Self Issue client will assume that the entered item id is always valid; if true the Self Issue client will request the item id to be re-entered if it cannot confirm validity and only continue if the item id is entered identically twice.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="AllowRenews" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>If false the 3M server will return an error if an attempt is made to issue an item already checked out to that patron; if true the 3M server will be told to interpret the check-out as a renewal request.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="SuppressSecurityFailureMessages" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Suppress errors from the Security device</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="SendShutdownStatus" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>If true will send a status update to the 3M server when client shuts down</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="EnableBarcodeAliases" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>If true allows aliases for command interfaces of the form $Command% (e.g. $Shutdown System% for *Shutdown System¦) This allows commands to be encoded as barcodes e.g. can be entered from a command barcode sheet ($ and % are available in most barcode encoding schemes).</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="EnableCheckIn" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Enables Check In screen as well as check out screen</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>              
              <xs:element name="PatronIDReaderDevice">
                <xs:annotation>
                  <xs:documentation>This allows optional support for local security tagging and gates. The included class works with JavaCard RFID devices.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="SmartCardReader" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Device name as defined in JavaSmart card API</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="class" use="required">
                    <xs:annotation>
                      <xs:documentation>Implementation class or null device</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="com.ceridwen.selfissue.client.nulldevices.IDReaderDevice"/>
                        <xs:enumeration value="com.ceridwen.selfissue.client.devices.JavaSmartCardDevice"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="ItemIDReaderDevice">
                <xs:annotation>
                  <xs:documentation>This allows optional support for local security tagging and gates. The included class works with JavaCard RFID devices.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="SmartCardReader" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Device name as defined in JavaSmart card API</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="class" use="required">
                    <xs:annotation>
                      <xs:documentation>Implementation class or null device</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="com.ceridwen.selfissue.client.nulldevices.IDReaderDevice"/>
                        <xs:enumeration value="com.ceridwen.selfissue.client.devices.JavaSmartCardDevice"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="ItemSecurityDevice">
                <xs:annotation>
                  <xs:documentation>This allows optional support for local security tagging and gates.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Retries" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Number of retries if initial attempt to desensitize device fails</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Timeout" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Time (ms) to wait for security device</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="class" use="required">
                    <xs:annotation>
                      <xs:documentation>Implementation class or null device</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="com.ceridwen.selfissue.client.nulldevices.ItemSecurityDevice"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="Printer">
                <xs:annotation>
                  <xs:documentation>This allows optional receipt printing</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="PrintReceipt" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>If true print receipt to default printer</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Loggers">
                <xs:annotation>
                  <xs:documentation>The loggers will log activity of the client via e-mail, syslog or a simple REST API. Typically these are used to alert staff when a manual intervention is required (for example a book checked out whilst offline cannot be automatically checked out by the 3M server). However, they can be used to log every activity of the client. Multiple loggers (for different purposes) can be defined.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element maxOccurs="unbounded" name="Logger">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="EventMask">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CheckoutSuccess" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject "Self Issue Checkout Report: Checkout Success Notification (no action required)" will be sent whenever a checkout is successfully performed on the 3M server (and reported to the user). It is anticipated that this would normally be suppressed unless a full record of activity is needed.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckoutFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject "Self Issue Checkout Report: Checkout Failure Notification (no action required)" whenever a checkout cannot be completed and the user is informed that the checkout has failed. This would normally be suppressed, but might be required to be recorded if there is a danger that the user would attempt to remove the item anyway.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckoutPending" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject "Self Issue Checkout Report: Checkout Pending Notification (no action required)". An item has been issued to an user when the 3M system was unavailable, and the checkout request has been spooled for an abnormally long amount of time. This is a warning message that there may be a problem with the Self Issue client's communication with the 3M server, the 3M server has been unavailable for an abnormal amount of time, or there is a network problem. No action is required as the client will continue to attempt to commit the checkout, but these warning should be kept in case of a synchronisation mismatch (e.g. if the patron returns the item before the checkout can be committed)</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="ManualCheckout" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>(ii) the item was spooled in Offline mode, but the 3M server has not been available for the designated maximum life an item can be kept in the spooler</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="Notification" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>It is anticipated that this would normally be suppressed unless a full record of activity is needed.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="UnlockFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if security device on item could not be unlocked successfully. Action may be required, but the user would be prompted to retry. An attempt is made to cancel the checkout.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CancelCheckoutFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if a cancel checkout could not be performed after an unlock failure. Action may be required - the user is warned that the book is checked out but still alarmed and advised to consult a member of staff</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="UnlockSuccess" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if security device on item was unlocked successfully. It is anticipated that this would normally be suppressed unless a full record of activity is needed</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckinSuccess" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject "Self Issue Checkin Report: Checkin Success Notification (no action required)" will be sent whenever a checkin is successfully performed on the 3M server (and reported to the user). It is anticipated that this would normally be suppressed unless a full record of activity is needed.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckinFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject "Self Issue Checkin Report: Checkin Failure Notification (no action required)" whenever a checkin cannot be completed and the user is informed that the checkin has failed. This would normally be suppressed, but might be required to be recorded if there is a danger that the user would attempt to remove the item anyway.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CheckinPending" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>E-Mail with subject "Self Issue Checkin Report: Checkin Pending Notification (no action required)" An item has been issued to an user when the 3M system was unavailable, and the checkout request has been spooled for an abnormally long amount of time. This is a warning message that there may be a problem with the Self Issue client's communication with the 3M server, the 3M server has been unavailable for an abnormal amount of time, or there is a network problem. No action is required as the client will continue to attempt to commit the checkin, but these warning should be kept in case of a synchronisation mismatch (e.g. if the patron returns the item before the checkin can be committed)</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="LockFailure" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if security device on item could not be locked successfully. Action may be required, but the user would be prompted to retry. An attempt is made to cancel the checkin.</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="LockSuccess" type="xs:boolean">
                                  <xs:annotation>
                                    <xs:documentation>Applicable for security system support - sends a message if security device on item was locked successfully. It is anticipated that this would normally be suppressed unless a full record of activity is needed</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="ReplayPeriod" type="xs:positiveInteger">
                            <xs:annotation>
                              <xs:documentation>Messages may be spooled if the server to receive them is not available. This indicates how often the spool is checked for stored messages (minutes)</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="OverdueAgeOutOfOrder" type="xs:nonNegativeInteger">
                            <xs:annotation>
                              <xs:documentation>If age (hours) of message in queue exceeds this, force Out Of Order (0 to disable) on the basis there is a severe network problem</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Host" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting:
ConsoleLogger - not used;
FileLogger - not used;
MailLogger - STMP relay ip;
RestLogger - REST server ip;
SocketLogger - Socket server ip;
SyslogLogger - Syslog server ip;
WinEventLogger - optional Windows host.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Port" type="xs:positiveInteger">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting:
ConsoleLogger - not used;
FileLogger - not used;
MailLogger - STMP relay port;
RestLogger - REST server port;
SocketLogger - Socket server port;
SyslogLogger - Syslog server port;
WinEventLogger - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="SSL" type="xs:boolean">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting:
ConsoleLogger - not used; 
FileLogger - not used; 
MailLogger - Use StartTLS; 
RestLogger - use https; 
SocketLogger - not used; 
SyslogLogger - not used; 
WinEventLogger - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Target" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting:
ConsoleLogger - not used;
FileLogger - not used; 
MailLogger - To e-mail address; 
RestLogger - path part of URL; 
SocketLogger - not used; 
SyslogLogger - not used; 
WinEventLogger - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Source" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting: 
ConsoleLogger - not used;
FileLogger - not used;
MailLogger - From e-mail address;
RestLogger - not used;
SocketLogger - not used;
SyslogLogger - not used; 
WinEventLogger - WinEvent source.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Username" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting: 
ConsoleLogger - not used;
FileLogger - not used;
MailLogger - Username for mail relay;
RestLogger - not used;
SocketLogger - not used;
SyslogLogger - not used; 
WinEventLogger - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Password" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting: 
ConsoleLogger - not used;
FileLogger - not used;
MailLogger - Password for mail relay;
RestLogger - not used;
SocketLogger - not used;
SyslogLogger - not used; 
WinEventLogger - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Formatter">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting (blank for default): 
ConsoleLogger - Text or XML;
FileLogger - Text or XML;
MailLogger - not used;
RestLogger - not used;
SocketLogger - Text or XML;
SyslogLogger - not used; 
WinEventLogger - not used.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                              <xs:restriction base="xs:string">
                                <xs:enumeration value="java.util.logging.SimpleFormatter"/>
                                <xs:enumeration value="java.util.logging.XMLFormatter"/>
                              </xs:restriction>
                            </xs:simpleType>                                                      
                          </xs:element>
                          <xs:element name="Encoding" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting (blank for default): 
ConsoleLogger - charset;
FileLogger - charset;
MailLogger - not used;
RestLogger - not used;
SocketLogger - charset;
SyslogLogger - not used; 
WinEventLogger - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>                          
                          <xs:element name="ConnectionTimeout" type="xs:positiveInteger">
                            <xs:annotation>
                              <xs:documentation>Time (seconds) to wait during initial connection</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="IdleTimeout" type="xs:positiveInteger">
                            <xs:annotation>
                              <xs:documentation>Time (seconds) to wait for responses</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Spool" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>File to spool messages waiting to be sent to</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                        </xs:sequence>
                        <xs:attribute name="class" use="required">
                          <xs:annotation>
                            <xs:documentation>Type of logger or null device</xs:documentation>
                          </xs:annotation>
                          <xs:simpleType>
                            <xs:restriction base="xs:string">
                              <xs:enumeration value="com.ceridwen.selfissue.client.nulldevices.OnlineLogLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.ConsoleLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.FileLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.MailLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.RestLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.SocketLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.SyslogLogger"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.log.WinEventLogger"/>
                            </xs:restriction>
                          </xs:simpleType>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="Spooler">
                <xs:annotation>
                  <xs:documentation>Local spool for offline stored requests</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ReplayPeriod" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Time (minutes) to replay spooler</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="OverdueAgeWarn" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Time (hours) item can remain in spooler before generating warning message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="OverdueAgeExpire" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Time (hours) item can remain in spooler before generating manual intervention message</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Spool" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>File to store spooled request</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="PersistentQueueImplementation">
                      <xs:annotation>
                        <xs:documentation>Implementation of persistent queue for spoolers.
Default is com.gaborcselle.persistent.PersistentQueue.
com.ceridwen.util.collections.PersistentQueue is deprecated but available for backwards compatibility for Self Issue 2.61 or earlier.
Note: the spooled object store is not compatible between these implementations. You will need to use a different spool path, or delete the existing spools if you change the implementation.</xs:documentation>
                      </xs:annotation>
                      <xs:simpleType>
	                    <xs:restriction base="xs:string">
    	                  <xs:enumeration value="com.gaborcselle.persistent.PersistentQueue"/>
        	              <xs:enumeration value="com.ceridwen.util.collections.PersistentQueue"/>
            	        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Admin">
          <xs:annotation>
            <xs:documentation>Configure error handling and logging</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
                <xs:element name="CommandInterface">
                  <xs:annotation>
                    <xs:documentation>Enable various debugging/testing features. The client supports various commands of the form *command| whilst at the patron screen. This can be disabled as required. (commands can also be entered as $command% if EnableBarcodeAlii is enabled under Modes)</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="AllowConnectionTest" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Allows *Test Connection¦ command in the patron panel (tests SIP connectivity)</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="AllowSystemsCheck" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Allow *Check Systems¦ command in the patron panel (indicates current modes, memory and spool use)</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="AllowLogTest" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Allow *Test Crash¦ command in the patron panel (tests unexpected error handling)</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="AllowSystemShutdown" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Allow *Shutdown System¦ command in the patron panel (closes Self Issue client after password check)</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="AllowOutOfOrder" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Allow *Out Of Order¦ command to switch to Out of Order screen (after password confirmation)</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="AllowResetOutOfOrder" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Allow *Reset Out Of Order¦ typed on Out of Order screen to reset to normal use (after password confirmation)</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="AllowCheckIn" type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>Allow *Check In¦ to switch to check in screen from patron screen (after password).This allows public check out only station to also be a staff only check in station</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                      <xs:element name="SystemPassword" type="xs:string">
                        <xs:annotation>
                          <xs:documentation>System password required to confirm staff actions such as shutdown and reset out of order (encrypted). Default password is password.</xs:documentation>
                        </xs:annotation>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
                <xs:element name="WatchDog">
                <xs:annotation>
                  <xs:documentation>The SelfIssue client has a Watch dog thread which periodically checks the health of the client.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Timer" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>How often to check health (seconds)</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CriticalSectionThreshold" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Number of consecutive health checks in critical section (e.g. communication with 3M server still active) to cause fatal error log</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="MinimumMemory" type="xs:positiveInteger">
                      <xs:annotation>
                        <xs:documentation>Minimum working memory before causing fatal error log</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ShowOutOfOrderScreenOnWatchDogProblem" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Show Out Of Order screen if memory low or too long in critical section</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="ShowOutOfOrderScreenOnUnhandledException" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>Show Out Of Order screen if unhandled exception happens</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="LoggingHandlers">
                <xs:annotation>
                  <xs:documentation>Configure java logging handlers</xs:documentation>
                </xs:annotation>                  
                <xs:complexType>
                  <xs:sequence>
                    <xs:element maxOccurs="unbounded" name="LoggingHandler">
                      <xs:annotation>
                        <xs:documentation>Type of logging handler</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="level">
                            <xs:annotation>
                              <xs:documentation>Level of debug event to log (SEVERE, WARNING, INFO, CONFIG, FINE, FINER,FINEST, ALL)</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                              <xs:restriction base="xs:string">
                                <xs:enumeration value="SEVERE"/>
                                <xs:enumeration value="WARNING"/>
                                <xs:enumeration value="INFO"/>
                                <xs:enumeration value="CONFIG"/>
                                <xs:enumeration value="FINE"/>
                                <xs:enumeration value="FINER"/>
                                <xs:enumeration value="FINEST"/>
                                <xs:enumeration value="ALL"/>
                              </xs:restriction>
                            </xs:simpleType>
                          </xs:element>
                          <xs:element name="Host" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>LoggingHandler dependent setting:
ConsoleLoggingHandlerWrapper - not used;
FileLoggingHandlerWrapper - not used;
MailLoggingHandlerWrapper - STMP relay ip;
RestLoggingHandlerWrapper - REST server ip;
SocketLoggingHandlerWrapper - Socket server ip;
SyslogLoggingHandlerWrapper - Syslog server ip;
WinEventLoggingHandlerWrapper - optional Windows host.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Port" type="xs:positiveInteger">
                            <xs:annotation>
                              <xs:documentation>LoggingHandler dependent setting:
ConsoleLoggingHandlerWrapper - not used;
FileLoggingHandlerWrapper - not used;
MailLoggingHandlerWrapper - STMP relay port;
RestLoggingHandlerWrapper - REST server port;
SocketLoggingHandlerWrapper - Socket server port; 
SyslogLoggingHandlerWrapper - Syslog server port;
WinEventLoggingHandlerWrapper - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="SSL" type="xs:boolean">
                            <xs:annotation>
                              <xs:documentation>LoggingHandler dependent setting:
ConsoleLoggingHandlerWrapper - not used; 
FileLoggingHandlerWrapper - not used; 
MailLoggingHandlerWrapper - use StartTLS;
RestLoggingHandlerWrapper - use https; 
SocketLoggingHandlerWrapper - not used;
SyslogLoggingHandlerWrapper - not used; 
WinEventLoggingHandlerWrapper - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Target" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>LoggingHandler dependent setting: 
ConsoleLoggingHandlerWrapper - not used;
FileLoggingHandlerWrapper - not used; 
MailLoggingHandlerWrapper - To e-mail address;
RestLoggingHandlerWrapper - path part of URL;
SocketLoggingHandlerWrapper - not used;
SyslogLoggingHandlerWrapper - not used;
WinEventLoggingHandlerWrapper - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Source" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>LoggingHandler dependent setting:
ConsoleLoggingHandlerWrapper - not used; 
FileLoggingHandlerWrapper - not used;
MailLoggingHandlerWrapper - From e-mail address;
RestLoggingHandlerWrapper - not used;
SocketLoggingHandlerWrapper - not used;
SyslogLoggingHandlerWrapper - not used;
WinEventLoggingHandlerWrapper - WinEvent source.</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="Username" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>LoggingHandler dependent setting:
ConsoleLoggingHandlerWrapper - not used; 
FileLoggingHandlerWrapper - not used;
MailLoggingHandlerWrapper - Username for relay;
RestLoggingHandlerWrapper - not used;
SocketLoggingHandlerWrapper - not used;
SyslogLoggingHandlerWrapper - not used;
WinEventLoggingHandlerWrapper - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element> 
                          <xs:element name="Password" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>LoggingHandler dependent setting:
ConsoleLoggingHandlerWrapper - not used; 
FileLoggingHandlerWrapper - not used;
MailLoggingHandlerWrapper - Password for Relay;
RestLoggingHandlerWrapper - not used;
SocketLoggingHandlerWrapper - not used;
SyslogLoggingHandlerWrapper - not used;
WinEventLoggingHandlerWrapper - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>                                                   
                          <xs:element name="Formatter">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting (blank for default): 
ConsoleLoggingHandlerWrapper - Text or XML;
FileLoggingHandlerWrapper - Text or XML;
MailLoggingHandlerWrapper - not used;
RestLoggingHandlerWrapper - not used;
SocketLoggingHandlerWrapper - Text or XML;
SyslogLoggingHandlerWrapper - not used; 
WinEventLoggingHandlerWrapper - not used.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                              <xs:restriction base="xs:string">
                                <xs:enumeration value="java.util.logging.SimpleFormatter"/>
                                <xs:enumeration value="java.util.logging.XMLFormatter"/>
                              </xs:restriction>
                            </xs:simpleType>                                                      
                          </xs:element>
                          <xs:element name="Encoding" type="xs:string">
                            <xs:annotation>
                              <xs:documentation>Logger dependent setting (blank for default): 
ConsoleLoggingHandlerWrapper - charset;
FileLoggingHandlerWrapper - charset;
MailLoggingHandlerWrapper - not used;
RestLoggingHandlerWrapper- not used;
SocketLoggingHandlerWrapper - charset;
SyslogLoggingHandlerWrapper - not used; 
WinEventLoggingHandlerWrapper - not used.</xs:documentation>
                            </xs:annotation>
                          </xs:element>                          
                          <xs:element name="ConnectionTimeout" type="xs:positiveInteger">
                            <xs:annotation>
                              <xs:documentation>Time (seconds) to wait during initial connection</xs:documentation>
                            </xs:annotation>
                          </xs:element>
                          <xs:element name="IdleTimeout" type="xs:positiveInteger">
                            <xs:annotation>
                              <xs:documentation>Time (seconds) to wait for responses</xs:documentation>
                            </xs:annotation>
                          </xs:element>                          
                        </xs:sequence>
                        <xs:attribute name="class" use="required">
                          <xs:annotation>
                            <xs:documentation>Type of logging handler</xs:documentation>
                          </xs:annotation>
                          <xs:simpleType>
                            <xs:restriction base="xs:string">
                              <xs:enumeration value="com.ceridwen.selfissue.client.logging.ConsoleLoggingHandlerWrapper"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.logging.FileLoggingHandlerWrapper"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.logging.RestLoggingHandlerWrapper"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.logging.SMTPLoggingHandlerWrapper"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.logging.SocketLoggingHandlerWrapper"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.logging.SyslogLoggingHandlerWrapper"/>
                              <xs:enumeration value="com.ceridwen.selfissue.client.logging.WinEventLogLoggingHandlerWrapper"/>
                            </xs:restriction>
                          </xs:simpleType>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
